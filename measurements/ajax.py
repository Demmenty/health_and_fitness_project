from datetime import date
from itertools import zip_longest

from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.core.serializers import serialize
from django.http import HttpResponse, HttpResponseBadRequest, JsonResponse
from django.views.decorators.http import require_http_methods

from measurements.forms import (
    AnthropometryForm,
    AnthropometryPhotoAccessForm,
    MeasurementCommentForm,
    MeasurementForm,
)
from measurements.models import AnthropometryPhotoAccess, Measurement
from measurements.utils import *

from .services import *


@login_required
@require_http_methods(["GET"])
def get_measure(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –¥–∞—Ç–µ"""

    client_id = request.GET.get("client")
    measure_date = request.GET.get("date")

    if not (measure_date and client_id):
        return HttpResponseBadRequest("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–æ–ª—è date –∏ client_id")

    measure = Measurement.objects.filter(user=client_id, date=measure_date)
    data = serialize("json", measure)

    return HttpResponse(data, content_type="application/json")


@login_required
@require_http_methods(["POST"])
def save_measure(request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""

    client = request.user
    form = MeasurementForm(request.POST)

    if form.is_valid():
        measure_date = form.cleaned_data["date"]
        if measure_date > date.today():
            return HttpResponseBadRequest("–ù–µ—Ç, —Ç–∞–∫ –Ω–µ–ª—å–∑—è üò†")

        instance = Measurement.objects.filter(
            user=client, date=measure_date
        ).first()
        if instance:
            form = MeasurementForm(request.POST, instance=instance)
            form.save()
        else:
            form = form.save(commit=False)
            form.user = client
            form.save()
        return HttpResponse("–ò–∑–º–µ—Ä–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    return HttpResponseBadRequest("–î–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")


@login_required
@require_http_methods(["POST"])
def save_measure_comment(request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞ –∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ ajax"""
    # –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    form = MeasurementCommentForm(request.POST)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    if form.is_valid():
        # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º—ã
        comment_date = form.cleaned_data["date"]
        # –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î —Å —ç—Ç–∏–º —á–∏—Å–ª–æ–º
        measure = Measurement.objects.get(date=comment_date, user=request.user)
        # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        form = MeasurementCommentForm(request.POST, instance=measure)
        form.save()
        new_comment = form.cleaned_data["comment"]
        data = {
            "new_comment": new_comment,
        }
        return JsonResponse(data, status=200)


@login_required
@require_http_methods(["GET"])
def get_color_settings(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ü–≤–µ—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ ajax-–∑–∞–ø—Ä–æ—Å"""

    if request.GET.get("client_id"):
        # –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ –∫–ª–∏–µ–Ω—Ç–µ
        client_id = request.GET.get("client_id")
        client = User.objects.get(id=client_id)
    else:
        # –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–∞–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client = request.user

    colorsettings = get_measurecolor_settings(client)

    return JsonResponse(colorsettings, status=200)


@login_required
@require_http_methods(["POST"])
def save_color_settings(request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ ajax"""

    client_id = request.POST.get("client_id")
    client = User.objects.get(id=client_id)

    # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–≤–µ—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    indices = request.POST.getlist("index")
    colors = request.POST.getlist("color")
    low_limits = request.POST.getlist("low_limit")
    up_limits = request.POST.getlist("upper_limit")
    # –∫—É–ª—ë–∫ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ü–≤–µ—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    colorset_values = zip_longest(indices, colors, low_limits, up_limits)

    save_measeurecolor_settings(client, colorset_values)

    return JsonResponse({}, status=200)


@login_required
@require_http_methods(["POST"])
def photoaccess_change(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–æ—Ç–æ –≤ –∞–Ω—Ç—Ä–æ–ø–æ–º–µ—Ç—Ä–∏–∏"""

    form = AnthropometryPhotoAccessForm(request.POST)

    if form.is_valid():
        instance = AnthropometryPhotoAccess.objects.get(user=request.user)
        form = AnthropometryPhotoAccessForm(request.POST, instance=instance)
        form.save()

        photoaccess_allowed = form.cleaned_data["photo_access"]
        if photoaccess_allowed:
            return HttpResponse("–î–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω")
        return HttpResponse("–î–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ç–æ –∑–∞–ø—Ä–µ—â–µ–Ω")

    return HttpResponseBadRequest("–î–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")


@login_required
@require_http_methods(["POST"])
def save_anthropometry(request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–Ω—Ç—Ä–æ–ø–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""

    form = AnthropometryForm(request.POST, request.FILES)

    if form.is_valid():
        entry_date = form.cleaned_data["date"]
        instance = get_anthropo_entry(request.user, entry_date)

        if instance:
            form = AnthropometryForm(
                request.POST, request.FILES, instance=instance
            )
            form.save()
        else:
            form = form.save(commit=False)
            form.user = request.user
            form.save()
        return HttpResponse("–ò–∑–º–µ—Ä–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    return HttpResponseBadRequest("–î–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
